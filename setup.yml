---
- name: DevOps assesment Infrastructure Setup
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    vault_url: "http://localhost:8200"
    vault_token: "myroot"
    db_host: "localhost"
    db_port: 5432
    db_name: "devops_assesment"
    db_user: "postgres"
    db_password: "changeme"

  tasks:
    - name: Wait for Vault to be ready
      uri:
        url: "{{ vault_url }}/v1/sys/health"
        method: GET
        status_code: [200, 429, 472, 473, 503]
      register: vault_health
      until: vault_health.status in [200, 429]
      retries: 30
      delay: 2

    - name: Wait for PostgreSQL to be ready
      postgresql_ping:
        host: "{{ db_host }}"
        port: "{{ db_port }}"
        db: "{{ db_name }}"
        login_user: "{{ db_user }}"
        login_password: "{{ db_password }}"
      register: postgres_health
      until: postgres_health is succeeded
      retries: 30
      delay: 2

    - name: Enable KV v2 secrets engine
      uri:
        url: "{{ vault_url }}/v1/sys/mounts/secret"
        method: POST
        headers:
          X-Vault-Token: "{{ vault_token }}"
        body_format: json
        body:
          type: "kv-v2"
          description: "Key-Value secrets engine v2"
        status_code: [200, 204, 400]

    - name: Store database credentials in Vault
      uri:
        url: "{{ vault_url }}/v1/secret/data/database"
        method: POST
        headers:
          X-Vault-Token: "{{ vault_token }}"
        body_format: json
        body:
          data:
            username: "{{ db_user }}"
            password: "{{ db_password }}"
        status_code: [200, 204]

    - name: Enable AppRole authentication
      uri:
        url: "{{ vault_url }}/v1/sys/auth/approle"
        method: POST
        headers:
          X-Vault-Token: "{{ vault_token }}"
        body_format: json
        body:
          type: "approle"
          description: "AppRole authentication for services"
        status_code: [200, 204, 400]

    - name: Create backend service policy
      uri:
        url: "{{ vault_url }}/v1/sys/policies/acl/backend-policy"
        method: PUT
        headers:
          X-Vault-Token: "{{ vault_token }}"
        body_format: json
        body:
          policy: |
            path "secret/data/database" {
              capabilities = ["read"]
            }
            path "auth/token/lookup-self" {
              capabilities = ["read"]
            }
        status_code: [200, 204]

    - name: Create AppRole for backend service
      uri:
        url: "{{ vault_url }}/v1/auth/approle/role/backend"
        method: POST
        headers:
          X-Vault-Token: "{{ vault_token }}"
        body_format: json
        body:
          token_policies: ["backend-policy"]
          token_ttl: "1h"
          token_max_ttl: "4h"
          bind_secret_id: true
        status_code: [200, 204]

    - name: Get AppRole role-id
      uri:
        url: "{{ vault_url }}/v1/auth/approle/role/backend/role-id"
        method: GET
        headers:
          X-Vault-Token: "{{ vault_token }}"
      register: role_id_response

    - name: Generate AppRole secret-id
      uri:
        url: "{{ vault_url }}/v1/auth/approle/role/backend/secret-id"
        method: POST
        headers:
          X-Vault-Token: "{{ vault_token }}"
        body_format: json
        body: {}
      register: secret_id_response

    - name: Save AppRole credentials
      copy:
        content: |
          ROLE_ID={{ role_id_response.json.data.role_id }}
          SECRET_ID={{ secret_id_response.json.data.secret_id }}
        dest: ./vault-init/approle-credentials.env
        mode: '0600'

    - name: Test AppRole authentication
      uri:
        url: "{{ vault_url }}/v1/auth/approle/login"
        method: POST
        body_format: json
        body:
          role_id: "{{ role_id_response.json.data.role_id }}"
          secret_id: "{{ secret_id_response.json.data.secret_id }}"
      register: approle_login

    - name: Verify secret access with AppRole token
      uri:
        url: "{{ vault_url }}/v1/secret/data/database"
        method: GET
        headers:
          X-Vault-Token: "{{ approle_login.json.auth.client_token }}"
      register: secret_test

    - name: Seed initial database data
      postgresql_query:
        host: "{{ db_host }}"
        port: "{{ db_port }}"
        db: "{{ db_name }}"
        login_user: "{{ db_user }}"
        login_password: "{{ db_password }}"
        query: |
          INSERT INTO users (username, email) VALUES 
          ('admin', 'admin@example.com'),
          ('user1', 'user1@example.com'),
          ('user2', 'user2@example.com')
          ON CONFLICT (username) DO NOTHING;

    - name: Display setup summary
      debug:
        msg: |
          ===== DevOps assesment Setup Complete =====
          
          Services:
          - Vault: {{ vault_url }}
          - PostgreSQL: {{ db_host }}:{{ db_port }}
          - Backend API: http://localhost:8443/api
          
          Vault AppRole:
          - Role ID: {{ role_id_response.json.data.role_id }}
          - Secret ID: {{ secret_id_response.json.data.secret_id }}
          
          Test endpoints:
          - Health: http://localhost:8443/api/health
          - Users: http://localhost:8443/api/users
          
          Credentials saved to: vault-init/approle-credentials.env