networks:
  devops-network:
    driver: bridge
  traefik-network:
    external: true

volumes:
  postgres_data:
  vault_data:
  vault_config:

services:
  # Traefik reverse proxy
  traefik:
    image: traefik:v3.0
    container_name: traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8443:8443"  
      - "8080:8080"  
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik:/etc/traefik:ro
      - ./certs:/certs:ro
    networks:
      - traefik-network
      - devops-network
    command:
      - --api.dashboard=true
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=traefik-network
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.backend.address=:8443
      - --certificatesresolvers.myresolver.acme.email=admin@example.com
      - --certificatesresolvers.myresolver.acme.storage=/certs/acme.json
      - --certificatesresolvers.myresolver.acme.httpassesment.entrypoint=web
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.traefik.entrypoints=web"

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: devops_assesment
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: changeme
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    networks:
      - devops-network
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d devops_assesment"]
      interval: 10s
      timeout: 5s
      retries: 5

  # HashiCorp Vault
  vault:
    image: hashicorp/vault:1.15
    container_name: vault
    restart: unless-stopped
    cap_add:
      - IPC_LOCK
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: myroot
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
      VAULT_ADDR: http://0.0.0.0:8200
    volumes:
      - vault_data:/vault/data
      - vault_config:/vault/config
      - ./vault-init:/vault/init
    networks:
      - devops-network
    ports:
      - "8200:8200"
    command: ["vault", "server", "-dev"]
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Application - FIXED ROUTING
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: backend
    restart: unless-stopped
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: devops_assesment
      
      VAULT_URL: http://vault:8200
      VAULT_TOKEN: myroot
      
      # Application configuration
      PORT: 3000
      NODE_ENV: production
    networks:
      - devops-network
      - traefik-network
    depends_on:
      postgres:
        condition: service_healthy
      vault:
        condition: service_healthy
      vault-init:
        condition: service_completed_successfully
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=PathPrefix(`/`)"
      - "traefik.http.routers.backend.entrypoints=backend"
      - "traefik.http.routers.backend.service=backend-service"
      - "traefik.http.services.backend-service.loadbalancer.server.port=3000"
      - "traefik.http.routers.backend-web.rule=Host(`api.localhost`)"
      - "traefik.http.routers.backend-web.entrypoints=web"
      - "traefik.http.routers.backend-web.service=backend-service"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Vault initialization service
  vault-init:
    image: hashicorp/vault:1.15
    container_name: vault-init
    restart: "no"
    environment:
      VAULT_ADDR: http://vault:8200
      VAULT_TOKEN: myroot
    volumes:
      - ./vault-init:/scripts:ro
    networks:
      - devops-network
    depends_on:
      vault:
        condition: service_healthy
    command: ["sh", "/scripts/init-vault.sh"]
    working_dir: /scripts
